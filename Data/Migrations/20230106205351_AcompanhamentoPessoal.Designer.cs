// <auto-generated />
using System;
using Data.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20230106205351_AcompanhamentoPessoal")]
    partial class AcompanhamentoPessoal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entidades.AcompanhamentoPessoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("ClienteId");

                    b.Property<DateTime?>("Data")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Data");

                    b.Property<string>("InformacoesLaboratoriais")
                        .HasColumnType("text")
                        .HasColumnName("InformacoesLaboratoriais");

                    b.Property<string>("OutrasInformacoes")
                        .HasColumnType("text")
                        .HasColumnName("OutrasInformacoes");

                    b.Property<double>("Peso")
                        .HasMaxLength(20)
                        .HasColumnType("double precision")
                        .HasColumnName("Peso");

                    b.Property<double>("PressaoArterial")
                        .HasMaxLength(20)
                        .HasColumnType("double precision")
                        .HasColumnName("PressaoArterial");

                    b.Property<string>("TipoSanguineo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TipoSanguineo");

                    b.HasKey("Id");

                    b.ToTable("AcompanhamentoPessoal");
                });

            modelBuilder.Entity("Data.Entidades.AdministradoraCartao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int?>("CieloPremia")
                        .HasColumnType("integer")
                        .HasColumnName("CieloPremia");

                    b.Property<decimal>("Desconto")
                        .HasColumnType("numeric")
                        .HasColumnName("Desconto");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<int>("Gerenciador")
                        .HasColumnType("integer")
                        .HasColumnName("Gerenciador");

                    b.Property<int>("Modalidade")
                        .HasColumnType("integer")
                        .HasColumnName("Modalidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<int?>("PlanoDeContaId")
                        .HasColumnType("integer")
                        .HasColumnName("PlanoDeContaId");

                    b.Property<int?>("PrazoRecebimento")
                        .HasColumnType("integer")
                        .HasColumnName("PrazoRecebimento");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("AdministradoraCartao");
                });

            modelBuilder.Entity("Data.Entidades.AliquotaEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AliquotaIcms")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIcms");

                    b.Property<int?>("EstadoDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoDestinoId");

                    b.Property<int?>("EstadoOrigemId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoOrigemId");

                    b.HasKey("Id");

                    b.ToTable("AliquotaEstado");
                });

            modelBuilder.Entity("Data.Entidades.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Entidades.Bairro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Bairro");
                });

            modelBuilder.Entity("Data.Entidades.Balanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BitsDeDados")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BitsDeDados");

                    b.Property<string>("BitsPorSegundo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BitsPorSegundo");

                    b.Property<string>("DescricaoModelo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DescricaoModelo");

                    b.Property<string>("Dtr")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Dtr");

                    b.Property<string>("Maquina")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Maquina");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Modelo");

                    b.Property<string>("Opcoes")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Opcoes");

                    b.Property<string>("Paridade")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Paridade");

                    b.Property<string>("PortaCom")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("PortaCom");

                    b.Property<string>("Rts")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Rts");

                    b.Property<string>("SeparadorDecimal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("SeparadorDecimal");

                    b.Property<string>("XonXoff")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("XonXoff");

                    b.HasKey("Id");

                    b.ToTable("Balanca");
                });

            modelBuilder.Entity("Data.Entidades.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("Agencia");

                    b.Property<string>("AgenciaDigito")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("AgenciaDigito");

                    b.Property<string>("Carteira")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Carteira");

                    b.Property<string>("CnpjCedente")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("CnpjCedente");

                    b.Property<string>("CodigoBanco")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CodigoBanco");

                    b.Property<string>("CodigoCedente")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("CodigoCedente");

                    b.Property<string>("CodigoTransmissao")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("CodigoTransmissao");

                    b.Property<string>("ComplementoTransmissao")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ComplementoTransmissao");

                    b.Property<string>("ContaCorrente")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ContaCorrente");

                    b.Property<string>("ContaCorrenteDigito")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ContaCorrenteDigito");

                    b.Property<string>("Convenio")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Convenio");

                    b.Property<int?>("DiasProtesto")
                        .HasColumnType("integer")
                        .HasColumnName("DiasProtesto");

                    b.Property<string>("FormaCobranca")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("FormaCobranca");

                    b.Property<decimal?>("Juros")
                        .HasColumnType("numeric")
                        .HasColumnName("Juros");

                    b.Property<string>("Layout")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("Layout");

                    b.Property<string>("LocalPagamento")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("LocalPagamento");

                    b.Property<string>("MensagemInstrucao1")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("MensagemInstrucao1");

                    b.Property<string>("MensagemInstrucao2")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("MensagemInstrucao2");

                    b.Property<string>("MensagemInstrucao3")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("MensagemInstrucao3");

                    b.Property<string>("MensagemInstrucao4")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("MensagemInstrucao4");

                    b.Property<string>("MensagemInstrucao5")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("MensagemInstrucao5");

                    b.Property<string>("Modalidade")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("Modalidade");

                    b.Property<decimal?>("Multa")
                        .HasColumnType("numeric")
                        .HasColumnName("Multa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NomeBanco");

                    b.Property<string>("NomeCedente")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("NomeCedente");

                    b.Property<bool>("Producao")
                        .HasColumnType("boolean")
                        .HasColumnName("Producao");

                    b.Property<int?>("SequenciaRemessa")
                        .HasColumnType("integer")
                        .HasColumnName("SequenciaRemessa");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("Data.Entidades.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcaoLink")
                        .HasColumnType("integer")
                        .HasColumnName("AcaoLink");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int?>("BannerMagentoId")
                        .HasColumnType("integer")
                        .HasColumnName("BannerMagentoId");

                    b.Property<DateTime?>("DataFim")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataFim");

                    b.Property<DateTime?>("DataInicio")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Descricao");

                    b.Property<byte[]>("ImagemBanner")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("ImagemBanner");

                    b.Property<string>("Integrados")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("Integrados");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Link");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer")
                        .HasColumnName("Posicao");

                    b.Property<string>("TipoDadoImagem")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("TipoDadoImagem");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Data.Entidades.Bula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Descricao");

                    b.Property<bool>("LimitacaoVisual")
                        .HasColumnType("boolean")
                        .HasColumnName("LimitacaoVisual");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Bula");
                });

            modelBuilder.Entity("Data.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlteradoPais")
                        .HasColumnType("boolean")
                        .HasColumnName("AlteradoPais");

                    b.Property<bool>("CategoriaAtivo")
                        .HasColumnType("boolean")
                        .HasColumnName("CategoriaAtiva");

                    b.Property<int?>("CategoriaMagentoId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaMagentoId");

                    b.Property<int?>("CategoriaPaiId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoriaPaiId");

                    b.Property<bool>("Excluidos")
                        .HasColumnType("boolean")
                        .HasColumnName("Excluidos");

                    b.Property<bool>("Integrados")
                        .HasColumnType("boolean")
                        .HasColumnName("Integrados");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Data.Entidades.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodigoCfpsId")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoCfpsId");

                    b.Property<int?>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoIbge");

                    b.Property<int?>("CodigoSiafi")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoSiafi");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCfpsId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("Data.Entidades.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("Data.Entidades.ContaCorrente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<double?>("Limite")
                        .HasColumnType("double precision")
                        .HasColumnName("Limite");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("NumeroConta");

                    b.HasKey("Id");

                    b.ToTable("ContaCorrente");
                });

            modelBuilder.Entity("Data.Entidades.Contabilista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<string>("Cep")
                        .HasColumnType("text")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Complemento")
                        .HasColumnType("text")
                        .HasColumnName("Complemento");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Crc")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("Crc");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("Endereco");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("Fax");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Numero")
                        .HasColumnType("text")
                        .HasColumnName("Numero");

                    b.Property<string>("Telefone")
                        .HasColumnType("text")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Contabilista");
                });

            modelBuilder.Entity("Data.Entidades.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Acrescimo")
                        .HasColumnType("double precision")
                        .HasColumnName("Acrescimo");

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("boolean")
                        .HasColumnName("Bloqueado");

                    b.Property<string>("CadastroFarmacia")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("CadastroFarmacia");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("CodigoPerdigao")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("CodigoPerdigao");

                    b.Property<string>("Complemento")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Complemento");

                    b.Property<string>("Ddd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("Ddd");

                    b.Property<double?>("Desconto")
                        .HasColumnType("double precision")
                        .HasColumnName("Desconto");

                    b.Property<int?>("DiaRecebimento")
                        .HasColumnType("integer")
                        .HasColumnName("DiaRecebimento");

                    b.Property<int?>("DiasPrimeiroVencimento")
                        .HasColumnType("integer")
                        .HasColumnName("DiasPrimeiroVencimento");

                    b.Property<string>("Endereco")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Endereco");

                    b.Property<bool>("EnderecoComprovanteVenda")
                        .HasColumnType("boolean")
                        .HasColumnName("EnderecoComprovanteVenda");

                    b.Property<bool>("EnviarEcommerce")
                        .HasColumnType("boolean")
                        .HasColumnName("EnviarEcommerce");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<int?>("EtiquetaId")
                        .HasColumnType("integer")
                        .HasColumnName("EtiquetaId");

                    b.Property<int>("IdentificadorConvenio")
                        .HasColumnType("integer")
                        .HasColumnName("IdentificaodrConvenio");

                    b.Property<string>("Ie")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Ie");

                    b.Property<double?>("Manifesto")
                        .HasColumnType("double precision")
                        .HasColumnName("Manifesto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("NumeroEndereco")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("NumeroEndereco");

                    b.Property<bool>("PermitirParcelamento")
                        .HasColumnType("boolean")
                        .HasColumnName("PermitirParcelamento");

                    b.Property<bool>("PermitirRateio")
                        .HasColumnType("boolean")
                        .HasColumnName("PermitirRateio");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<int?>("VisitadorId")
                        .HasColumnType("integer")
                        .HasColumnName("VisitadorId");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("VisitadorId");

                    b.ToTable("Convenio");
                });

            modelBuilder.Entity("Data.Entidades.ConvenioGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AplicaCustoReferencia")
                        .HasColumnType("boolean")
                        .HasColumnName("AplicaCustoReferencia");

                    b.Property<bool>("AplicaDescontoProduto")
                        .HasColumnType("boolean")
                        .HasColumnName("AplicaDescontoProduto");

                    b.Property<int?>("ConvenioGrupoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvenioId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("ConvenioId");

                    b.Property<double>("Desconto")
                        .HasColumnType("double precision")
                        .HasColumnName("Desconto");

                    b.Property<int?>("GrupoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioGrupoId");

                    b.ToTable("ConvenioGrupo");
                });

            modelBuilder.Entity("Data.Entidades.DOM_RegimeTributario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idRegimeTributario");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RegimeTributario")
                        .HasColumnType("text")
                        .HasColumnName("RegimeTributario");

                    b.HasKey("Id");

                    b.ToTable("DOM_RegimeTributario");
                });

            modelBuilder.Entity("Data.Entidades.Dcb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoDcb")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CodigoDcb");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Dcb");
                });

            modelBuilder.Entity("Data.Entidades.Dci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoDci")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("CodigoDci");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Dci");
                });

            modelBuilder.Entity("Data.Entidades.DiasHoras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoDia")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoDia");

                    b.Property<string>("DiaSemana")
                        .HasColumnType("text")
                        .HasColumnName("DiaSemana");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("Hash");

                    b.Property<DateTime>("HoraFinal")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinal");

                    b.Property<DateTime>("HoraInicial")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicial");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("Quantidade");

                    b.Property<int>("Sequencia")
                        .HasColumnType("integer")
                        .HasColumnName("Sequencia");

                    b.HasKey("Id");

                    b.ToTable("DiasHoras");
                });

            modelBuilder.Entity("Data.Entidades.Diferimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AliquotaDiferimento")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaDiferimento");

                    b.Property<string>("Cst")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Cst");

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<double?>("Icms")
                        .HasColumnType("double precision")
                        .HasColumnName("Icms");

                    b.Property<string>("SiglaEstado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("SiglaEstado");

                    b.HasKey("Id");

                    b.ToTable("Diferimento");
                });

            modelBuilder.Entity("Data.Entidades.Ecf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcentoFormaPagamento")
                        .HasColumnType("boolean")
                        .HasColumnName("AcentoFormaPagamento");

                    b.Property<string>("CniEcf")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CniEcf");

                    b.Property<int?>("Cro")
                        .HasColumnType("integer")
                        .HasColumnName("Cro");

                    b.Property<DateTime?>("DataCadastroUsuario")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataCadastroUsuario");

                    b.Property<DateTime?>("DataGravacaoSb")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataGravacaoSb");

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<string>("GrandeTotalCripto")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("GrandeTotalCripto");

                    b.Property<DateTime?>("HoraCadastroUsuario")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraCadastroUsuario");

                    b.Property<DateTime?>("HoraGravacaoSb")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraGravacaoSb");

                    b.Property<bool>("MaisculoFormaPagamento")
                        .HasColumnType("boolean")
                        .HasColumnName("MaiusculoFormaPagamento");

                    b.Property<int>("Marca")
                        .HasColumnType("integer")
                        .HasColumnName("Marca");

                    b.Property<char>("MfAdicional")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("MfAdicional");

                    b.Property<string>("Modelo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Modelo");

                    b.Property<int>("NumeroEquipamento")
                        .HasColumnType("integer")
                        .HasColumnName("NumeroEquipamento");

                    b.Property<string>("NumeroFabricacaoCripto")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("NumeroFabricacaoCripto");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("NumeroSerie");

                    b.Property<int?>("OrdemUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("OrdemUsuario");

                    b.Property<string>("PafEcf")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)")
                        .HasColumnName("PafEcf");

                    b.Property<string>("PafNumeroFabricacao")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)")
                        .HasColumnName("PafNumeroFabricacao");

                    b.Property<int?>("SaltoFinalCupom")
                        .HasColumnType("integer")
                        .HasColumnName("SaltoFinalCupom");

                    b.Property<string>("TipoModelo")
                        .HasColumnType("text")
                        .HasColumnName("TipoModelo");

                    b.Property<string>("VersaoDll")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("VersaoDll");

                    b.Property<string>("VersaoSb")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("VersaoSb");

                    b.HasKey("Id");

                    b.ToTable("Ecf");
                });

            modelBuilder.Entity("Data.Entidades.Ensaio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FarmacopeiaId")
                        .HasColumnType("integer")
                        .HasColumnName("FarmacopeiaId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("FarmacopeiaId");

                    b.ToTable("Ensaio");
                });

            modelBuilder.Entity("Data.Entidades.Entregador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Contato")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Contato");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime?>("DataAtualizacaoRec")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacaoRec");

                    b.Property<string>("Ddd")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("Ddd");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<bool>("EntregadorInativo")
                        .HasColumnType("boolean")
                        .HasColumnName("EntregadorInativo");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Fax");

                    b.Property<string>("IeEntregador")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("IeEntregador");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeUsuario")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeUsuario");

                    b.Property<string>("NomeUsuarioRec")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeUsuarioRec");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<string>("TelefoneContato")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TelefoneContato");

                    b.HasKey("Id");

                    b.ToTable("Entregador");
                });

            modelBuilder.Entity("Data.Entidades.EntregadorRegiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EntregadorId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("EntregadorId");

                    b.Property<int?>("RegiaoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("RegiaoId");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("RegiaoId");

                    b.ToTable("EntregadorRegiao");
                });

            modelBuilder.Entity("Data.Entidades.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Especialidade");
                });

            modelBuilder.Entity("Data.Entidades.EspecialidadePrescritor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EspecialidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("EspecialidadeId");

                    b.Property<int?>("PrescritorId")
                        .HasColumnType("integer")
                        .HasColumnName("PrescritorId");

                    b.HasKey("Id");

                    b.HasIndex("PrescritorId");

                    b.ToTable("EspecialidadePrescritor");
                });

            modelBuilder.Entity("Data.Entidades.EspecificacaoCapsula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("Prioridade")
                        .HasColumnType("integer")
                        .HasColumnName("Prioridade");

                    b.HasKey("Id");

                    b.ToTable("EspecificacaoCapsula");
                });

            modelBuilder.Entity("Data.Entidades.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AliquotaFcpEstado")
                        .HasColumnType("numeric")
                        .HasColumnName("AliquotaFcpEstado");

                    b.Property<decimal?>("AliquotaIcmsEstado")
                        .HasColumnType("numeric")
                        .HasColumnName("AliquotaIcmsEstado");

                    b.Property<bool>("ChecagemContribuinteIsento")
                        .HasColumnType("boolean")
                        .HasColumnName("ChecagemContribuinteIsento");

                    b.Property<bool>("DifalComCalculoDeIsento")
                        .HasColumnType("boolean")
                        .HasColumnName("DifalComCalculoDeIsento");

                    b.Property<bool>("DifalComCalculoPorDentro")
                        .HasColumnType("boolean")
                        .HasColumnName("DifalComCalculoPorDentro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<int?>("PaisId")
                        .HasColumnType("integer")
                        .HasColumnName("PaisId");

                    b.Property<string>("Sigla")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("Sigla");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("Data.Entidades.Etapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Obrigatoria")
                        .HasColumnType("text")
                        .HasColumnName("Obrigatoria");

                    b.Property<string>("Processo")
                        .HasColumnType("text")
                        .HasColumnName("Processo");

                    b.Property<int>("Sequencia")
                        .HasColumnType("integer")
                        .HasColumnName("Sequencia");

                    b.Property<string>("TempoMaximo")
                        .HasColumnType("text")
                        .HasColumnName("TempoMaximo");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Etapa");
                });

            modelBuilder.Entity("Data.Entidades.Etiqueta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AlturaEtiqueta")
                        .HasColumnType("double precision")
                        .HasColumnName("AlturaEtiqueta");

                    b.Property<bool>("CodigoDeBarraVertical")
                        .HasColumnType("boolean")
                        .HasColumnName("CodigoDeBarraVertical");

                    b.Property<int>("ColunasPorPagina")
                        .HasColumnType("integer")
                        .HasColumnName("ColunasPorPagina");

                    b.Property<bool>("DefirnirEtiquetaPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("DefinirEtiquetaPadrao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double>("DistanciaHorizontal")
                        .HasColumnType("double precision")
                        .HasColumnName("DistanciaHorizontal");

                    b.Property<double>("DistanciaVertical")
                        .HasColumnType("double precision")
                        .HasColumnName("DistanciaVertical");

                    b.Property<double>("EspacoEntreLinhas")
                        .HasColumnType("double precision")
                        .HasColumnName("EspacoEntreLinhas");

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<double>("LarguraEtiqueta")
                        .HasColumnType("double precision")
                        .HasColumnName("LarguraEtiqueta");

                    b.Property<int>("LayoutEtiquetaEntrada")
                        .HasColumnType("integer")
                        .HasColumnName("LayoutEtiquetaEntrada");

                    b.Property<int?>("LayoutWeleda")
                        .HasColumnType("integer")
                        .HasColumnName("LayoutWeleda");

                    b.Property<int>("LinhasPorEtiqueta")
                        .HasColumnType("integer")
                        .HasColumnName("LinhasPorEtiqueta");

                    b.Property<int>("LinhasPorPagina")
                        .HasColumnType("integer")
                        .HasColumnName("LinhasPorPagina");

                    b.Property<double>("MargemLateral")
                        .HasColumnType("double precision")
                        .HasColumnName("MargemLateral");

                    b.Property<double>("MargemSuperior")
                        .HasColumnType("double precision")
                        .HasColumnName("MargemSuperior");

                    b.Property<byte[]>("ModeloImagem")
                        .HasColumnType("bytea")
                        .HasColumnName("ModeloImagem");

                    b.Property<string>("Observacao")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Observacao");

                    b.Property<bool>("RetirarEspacoEntreUnidEQtd")
                        .HasColumnType("boolean")
                        .HasColumnName("RetirarEspacoEntreUnidEQtd");

                    b.Property<string>("TextoCabecalho")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("TextoCabecalho");

                    b.Property<string>("TextoRodape")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("TextoRodape");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.Property<bool>("TipoLayoutEtiquetaPersonalizado")
                        .HasColumnType("boolean")
                        .HasColumnName("TipoLayoutEtiquetaPersonalizado");

                    b.Property<int?>("TipoModeloEtiquta")
                        .HasColumnType("integer")
                        .HasColumnName("TipoModeloEtiqueta");

                    b.HasKey("Id");

                    b.ToTable("Etiqueta");
                });

            modelBuilder.Entity("Data.Entidades.Farmacopeia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("Observacao")
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.HasKey("Id");

                    b.ToTable("Farmacopeia");
                });

            modelBuilder.Entity("Data.Entidades.Fidelidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvisoCliente")
                        .HasColumnType("integer")
                        .HasColumnName("AvisoCliente");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("PontosIniciais")
                        .HasColumnType("integer")
                        .HasColumnName("PontosIniciais");

                    b.Property<int?>("PontosPrimeiraCompra")
                        .HasColumnType("integer")
                        .HasColumnName("PontosPrimeiraCompra");

                    b.Property<int?>("ValidadePontos")
                        .HasColumnType("integer")
                        .HasColumnName("ValidadePontos");

                    b.HasKey("Id");

                    b.ToTable("Fidelidade");
                });

            modelBuilder.Entity("Data.Entidades.FidelidadeFormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoFidelidade")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoFidelidade");

                    b.Property<int>("CodigoFormaPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoFormaPagamento");

                    b.Property<int>("Pontos")
                        .HasColumnType("integer")
                        .HasColumnName("Pontos");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.ToTable("FidelidadeFormaPagamento");
                });

            modelBuilder.Entity("Data.Entidades.FidelidadePremios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FidelidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("FidelidadeId");

                    b.Property<int?>("GrupoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId");

                    b.Property<int>("Pontos")
                        .HasColumnType("integer")
                        .HasColumnName("Pontos");

                    b.Property<int?>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.HasKey("Id");

                    b.HasIndex("FidelidadeId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("FidelidadePremios");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceutica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AliquotaIva")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIva");

                    b.Property<bool>("AtivaFatorPerdaQsp")
                        .HasColumnType("boolean")
                        .HasColumnName("AtivaFatorPerdaQsp");

                    b.Property<bool>("AtivaPesagemMonitorada")
                        .HasColumnType("boolean")
                        .HasColumnName("AtivaPesagemMonitorada");

                    b.Property<bool>("CalcularDensidade")
                        .HasColumnType("boolean")
                        .HasColumnName("CalcularDensidade");

                    b.Property<int?>("CalculoEmbalagemForma")
                        .HasColumnType("integer")
                        .HasColumnName("CalculoEmbalagemForma");

                    b.Property<int?>("CodigoFilialProducao")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoFilialProducao");

                    b.Property<int?>("CodigoFormaReceituario")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoFormaReceituario");

                    b.Property<int?>("CodigoFuncionarioManipulacao")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoFuncionarioManipulacao");

                    b.Property<string>("CodigoLaboratorioLp")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("CodigoLaboratorioLp");

                    b.Property<bool>("ConverteVolumeEmbalagem")
                        .HasColumnType("boolean")
                        .HasColumnName("ConverteVolumeEmbalagem");

                    b.Property<double?>("CustoAdicional")
                        .HasColumnType("double precision")
                        .HasColumnName("CustoAdicional");

                    b.Property<bool>("DeduzirQuantidadeVeiculo")
                        .HasColumnType("boolean")
                        .HasColumnName("DeduzirQuantidadeVeiculo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descrição");

                    b.Property<string>("DescricaoRotulo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DescricaoRotulo");

                    b.Property<double?>("FatorPerdaProduto")
                        .HasColumnType("double precision")
                        .HasColumnName("FatorPerdaProduto");

                    b.Property<int?>("GrupoVeiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoVeiculoId");

                    b.Property<bool>("HomeopatiaLiquida")
                        .HasColumnType("boolean")
                        .HasColumnName("HomeopatiaLiquida");

                    b.Property<byte[]>("ImagemByte")
                        .HasColumnType("bytea")
                        .HasColumnName("ImagemByte");

                    b.Property<bool>("ImprimirCamposAnalise")
                        .HasColumnType("boolean")
                        .HasColumnName("ImprimirCamposAnalise");

                    b.Property<bool>("ImprimirUnidadeMedidaNoRotulo")
                        .HasColumnType("boolean")
                        .HasColumnName("ImprimirUnidadeMedidaNoRotulo");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Inativo");

                    b.Property<int?>("ManipuladorId")
                        .HasColumnType("integer")
                        .HasColumnName("ManipuladorId");

                    b.Property<double?>("MlGotas")
                        .HasColumnType("double precision")
                        .HasColumnName("MlGotas");

                    b.Property<bool>("MultiplicaComposicao")
                        .HasColumnType("boolean")
                        .HasColumnName("MultiplicaComposicao");

                    b.Property<int?>("NcmId")
                        .HasColumnType("integer")
                        .HasColumnName("NcmId");

                    b.Property<string>("POPForma")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("POPForma");

                    b.Property<int?>("ProdutoVeiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoVeiculoId");

                    b.Property<int?>("QuantidadeFormulasHora")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeFormulasHora");

                    b.Property<double?>("QuantidadeQspMinimo")
                        .HasColumnType("double precision")
                        .HasColumnName("QuantidadeQspMinimo");

                    b.Property<bool>("SelecionaQuantidadeSugerida")
                        .HasColumnType("boolean")
                        .HasColumnName("SelecionaQuantidadeSugerida");

                    b.Property<bool>("SelecionarVolumeAutomático")
                        .HasColumnType("boolean")
                        .HasColumnName("SelecionarVolumeAutomático");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.Property<int?>("TipoUso")
                        .HasColumnType("integer")
                        .HasColumnName("TipoUso");

                    b.Property<string>("Uso")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Uso");

                    b.Property<int?>("Validade")
                        .HasColumnType("integer")
                        .HasColumnName("Validade");

                    b.Property<double?>("ValorMinimo")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorMinimo");

                    b.HasKey("Id");

                    b.HasIndex("GrupoVeiculoId");

                    b.HasIndex("ManipuladorId");

                    b.HasIndex("NcmId");

                    b.HasIndex("ProdutoVeiculoId");

                    b.ToTable("FormaFarmaceutica");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceuticaEnsaio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int>("FormaFarmaceuticaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.HasKey("Id");

                    b.HasIndex("FormaFarmaceuticaId");

                    b.ToTable("FormaFarmaceuticaEnsaio");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceuticaFaixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FormaFarmaceuticaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.Property<double?>("QuantidadeFinal")
                        .HasColumnType("double precision")
                        .HasColumnName("QuantidadeFinal");

                    b.Property<double?>("QuantidadeInicial")
                        .HasColumnType("double precision")
                        .HasColumnName("QuantidadeInicial");

                    b.Property<string>("SiglaUnidadeFaixa")
                        .HasColumnType("text")
                        .HasColumnName("SiglaUnidadeFaixa");

                    b.Property<double?>("ValorMinimo")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorMinimo");

                    b.HasKey("Id");

                    b.ToTable("FormaFarmaceuticaFaixa");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceuticaMargem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FormaFarmaceuticaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.Property<double>("Margem")
                        .HasColumnType("double precision")
                        .HasColumnName("Margem");

                    b.Property<double?>("ValorFinal")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorFinal");

                    b.Property<double?>("ValorInicial")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorInicial");

                    b.HasKey("Id");

                    b.HasIndex("FormaFarmaceuticaId");

                    b.ToTable("FormaFarmaceuticaMargem");
                });

            modelBuilder.Entity("Data.Entidades.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorizarDescontos")
                        .HasColumnType("integer")
                        .HasColumnName("AutorizarDescontos");

                    b.Property<bool>("Conciliacao")
                        .HasColumnType("boolean")
                        .HasColumnName("Conciliacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("PlanoDeContaId")
                        .HasColumnType("integer")
                        .HasColumnName("PlanoDeContaId");

                    b.Property<int>("TipoPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("TipoFormaPagamento");

                    b.HasKey("Id");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("Data.Entidades.FormulaPadrao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CapsulaId")
                        .HasColumnType("integer")
                        .HasColumnName("CapsulaId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<bool>("DesmembrarFormula")
                        .HasColumnType("boolean")
                        .HasColumnName("DesmembrarFormula");

                    b.Property<double?>("DoseCapsula")
                        .HasColumnType("double precision")
                        .HasColumnName("DoseCapsula");

                    b.Property<double?>("DoseFormula")
                        .HasColumnType("double precision")
                        .HasColumnName("DoseFormula");

                    b.Property<double?>("DosePadrao")
                        .HasColumnType("double precision")
                        .HasColumnName("DosePadrao");

                    b.Property<int?>("EmbalagemId")
                        .HasColumnType("integer")
                        .HasColumnName("EmbalagemId");

                    b.Property<int?>("EtiquetaId")
                        .HasColumnType("integer")
                        .HasColumnName("EtiquetaId");

                    b.Property<bool>("ExibirRotuloCompleto")
                        .HasColumnType("boolean")
                        .HasColumnName("ExibirRotuloCompleto");

                    b.Property<int?>("FormaFarmaceuticaId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.Property<int?>("GrupoCapsulaId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoCapsulaId");

                    b.Property<int?>("GrupoEmbalagemId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoEmbalagemId");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId");

                    b.Property<int?>("GrupoProdutoVeiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoProdutoVeiculoId");

                    b.Property<bool>("InativarFormula")
                        .HasColumnType("boolean")
                        .HasColumnName("InativarFormula");

                    b.Property<bool>("MantemQuantidadeOrdem")
                        .HasColumnType("boolean")
                        .HasColumnName("MantemQuantidadeOrdem");

                    b.Property<bool>("ManterDescricao")
                        .HasColumnType("boolean")
                        .HasColumnName("ManterDescricao");

                    b.Property<string>("Observacao")
                        .HasMaxLength(999)
                        .HasColumnType("character varying(999)")
                        .HasColumnName("Observacao");

                    b.Property<string>("ObservacaoEtiqueta")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ObservacaoEtiqueta");

                    b.Property<int?>("PosologiaId")
                        .HasColumnType("integer")
                        .HasColumnName("PosologiaId");

                    b.Property<int?>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId");

                    b.Property<int?>("ProdutoVeiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoVeiculoId");

                    b.Property<int?>("QuantidadeCapsulas")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeCapsulas");

                    b.Property<int?>("QuantidadeEmbalagens")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeEmbalagens");

                    b.Property<int?>("QuantidadeFormulaPadrao")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeFormulaPadrao");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.Property<int?>("UnidadeDoseId")
                        .HasColumnType("integer")
                        .HasColumnName("UnidadeDoseId");

                    b.Property<int?>("UnidadeDosePadraoId")
                        .HasColumnType("integer")
                        .HasColumnName("UnidadeDosePadraoId");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("UnidadeId");

                    b.Property<int?>("Validade")
                        .HasColumnType("integer")
                        .HasColumnName("Validade");

                    b.Property<double?>("ValorFormula")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorFormula");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("Volume");

                    b.Property<string>("VolumePadrao2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("VolumePadrao2");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("PosologiaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UnidadeDoseId");

                    b.HasIndex("UnidadeDosePadraoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("FormulaPadrao");
                });

            modelBuilder.Entity("Data.Entidades.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("Agencia");

                    b.Property<string>("AlvaraSanitario")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AlvaraSanitario");

                    b.Property<string>("AutorizacaoEspecial")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AutorizacaoEspecial");

                    b.Property<string>("AutorizacaoFuncionamento")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AutorizacaoFuncionamento");

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<int?>("BancoId")
                        .HasColumnType("integer")
                        .HasColumnName("BancoId");

                    b.Property<string>("CadastroFarmacia")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CadastroFarmacia");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<string>("Complemento")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Complemento");

                    b.Property<string>("ContaCorrenteFornecedor")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ContaCorrenteFornecedor");

                    b.Property<string>("Contato")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Contato");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Ddd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("Ddd");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Endereco");

                    b.Property<int?>("EstadoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Fax");

                    b.Property<string>("FormaPagamento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FormaPagamento");

                    b.Property<string>("Frete")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Frete");

                    b.Property<string>("HomePage")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("HomePage");

                    b.Property<string>("HostFornecedor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("HostFornecedor");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("InscricaoEstadual");

                    b.Property<string>("LicencaMapa")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LicencaMapa");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NomeFantasia");

                    b.Property<string>("NomeFornecedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NomeFornecedor");

                    b.Property<string>("NumeroEndereco")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("NumeroEndereco");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Observacoes");

                    b.Property<int?>("PlanoDeContaId")
                        .HasColumnType("integer")
                        .HasColumnName("PlanoDeContaId");

                    b.Property<int?>("PrevisaoEntrega")
                        .HasColumnType("integer")
                        .HasColumnName("PrevisaoEntrega");

                    b.Property<string>("ResponsavelTecnico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ResponsavelTecnico");

                    b.Property<string>("SenhaFornecedor")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("SenhaFornecedor");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<string>("TelefoneContato")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TelefoneContato");

                    b.Property<string>("UsuarioFornecedor")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("UsuarioFornecedor");

                    b.Property<decimal?>("ValorMinimoPedido")
                        .HasColumnType("numeric")
                        .HasColumnName("ValorMinimoPedido");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("BancoId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("Data.Entidades.FuncionarioLaboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("FuncionarioLaboratorio");
                });

            modelBuilder.Entity("Data.Entidades.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AtivaControleDeLotesAcabados")
                        .HasColumnType("boolean")
                        .HasColumnName("AtivaControleDeLotesAcabados");

                    b.Property<bool>("AtivaControleLotesDrogaria")
                        .HasColumnType("boolean")
                        .HasColumnName("AtivaControleLotesDrogaria");

                    b.Property<bool>("AtivaPesagemGrupo")
                        .HasColumnType("boolean")
                        .HasColumnName("AtivaPesagemGrupo");

                    b.Property<string>("CodigoGrupoLp")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("CodigoGrupoLp");

                    b.Property<double>("Comissao")
                        .HasColumnType("double precision")
                        .HasColumnName("Comissao");

                    b.Property<double?>("DescontoMaximo")
                        .HasColumnType("double precision")
                        .HasColumnName("DescontoMaximo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double?>("FatorReferenciaGrupo")
                        .HasColumnType("double precision")
                        .HasColumnName("FatorReferenciaGrupo");

                    b.Property<double>("PercentualDesconto")
                        .HasColumnType("double precision")
                        .HasColumnName("PercentualDesconto");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Data.Entidades.GrupoEnsaio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnsaioId")
                        .HasColumnType("integer")
                        .HasColumnName("EnsaioId");

                    b.Property<int>("GrupoId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("GrupoEnsaio");
                });

            modelBuilder.Entity("Data.Entidades.GrupoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("NivelGrupo")
                        .HasColumnType("integer")
                        .HasColumnName("NivelGrupo");

                    b.HasKey("Id");

                    b.ToTable("GrupoUsuario");
                });

            modelBuilder.Entity("Data.Entidades.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Laboratorio");
                });

            modelBuilder.Entity("Data.Entidades.ListaControlado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Codigo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<bool>("ReceitaObrigatorio")
                        .HasColumnType("boolean")
                        .HasColumnName("ReceitaObrigatorio");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("ListaControlado");
                });

            modelBuilder.Entity("Data.Entidades.LocalEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AliquotaIss")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIss");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int?>("CfopId")
                        .HasColumnType("integer")
                        .HasColumnName("CfopId");

                    b.Property<double>("Codigo")
                        .HasColumnType("double precision")
                        .HasColumnName("Codigo");

                    b.Property<int?>("CodigoBeneficioFiscalId")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoBeneficioFiscalId");

                    b.Property<double?>("CodigoNatureza")
                        .HasColumnType("double precision")
                        .HasColumnName("CodigoNatureza");

                    b.Property<int?>("CsosnId")
                        .HasColumnType("integer")
                        .HasColumnName("CsosnId");

                    b.Property<int?>("CstId")
                        .HasColumnType("integer")
                        .HasColumnName("CstId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("integer")
                        .HasColumnName("EntregadorId");

                    b.Property<int?>("NcmId")
                        .HasColumnType("integer")
                        .HasColumnName("NcmId");

                    b.Property<double>("TaxaEntrega")
                        .HasColumnType("double precision")
                        .HasColumnName("TaxaEntrega");

                    b.HasKey("Id");

                    b.HasIndex("CfopId");

                    b.HasIndex("CodigoBeneficioFiscalId");

                    b.HasIndex("CsosnId");

                    b.HasIndex("CstId");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("NcmId");

                    b.ToTable("LocalEntrega");
                });

            modelBuilder.Entity("Data.Entidades.MaquinaPos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdquirentePosId")
                        .HasColumnType("integer")
                        .HasColumnName("AdquirentePosId");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Descricao");

                    b.Property<string>("SerialPos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SerialPos");

                    b.HasKey("Id");

                    b.HasIndex("AdquirentePosId");

                    b.ToTable("MaquinaPos");
                });

            modelBuilder.Entity("Data.Entidades.MensagensPadrao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DescricaoRotulo")
                        .HasColumnType("boolean")
                        .HasColumnName("DescricaoRotulo");

                    b.Property<bool>("EnviarAutomatico")
                        .HasColumnType("boolean")
                        .HasColumnName("EnviarAutomatico");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Mensagem");

                    b.Property<string>("StatusDescricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("StatusDescricao");

                    b.HasKey("Id");

                    b.ToTable("MensagensPadrao");
                });

            modelBuilder.Entity("Data.Entidades.Metodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Descricao");

                    b.Property<decimal?>("Percentual")
                        .HasColumnType("numeric")
                        .HasColumnName("Percentual");

                    b.Property<int?>("QuantidadeGotas")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeGotas");

                    b.HasKey("Id");

                    b.ToTable("Metodo");
                });

            modelBuilder.Entity("Data.Entidades.Moeda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Moeda");
                });

            modelBuilder.Entity("Data.Entidades.Motivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Motivo");
                });

            modelBuilder.Entity("Data.Entidades.NaturezaOperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CfopDevolucao")
                        .HasColumnType("boolean")
                        .HasColumnName("CfopDevolucao");

                    b.Property<bool>("CfopSubstituicaoTributaria")
                        .HasColumnType("boolean")
                        .HasColumnName("CfopSubstituicaoTributaria");

                    b.Property<decimal>("Codigo")
                        .HasColumnType("numeric")
                        .HasColumnName("Codigo");

                    b.Property<bool>("ConsiderarCfopCreditoIcms")
                        .HasColumnType("boolean")
                        .HasColumnName("ConsiderarCfopCreditoIcms");

                    b.Property<int?>("CsosnId")
                        .HasColumnType("integer")
                        .HasColumnName("CsosnId");

                    b.Property<int?>("CstId")
                        .HasColumnType("integer")
                        .HasColumnName("CstId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Descricao");

                    b.Property<bool>("ExibeDocumentoReferenciado")
                        .HasColumnType("boolean")
                        .HasColumnName("ExibeDocumentoReferenciado");

                    b.Property<bool>("ExportarSintegra")
                        .HasColumnType("boolean")
                        .HasColumnName("ExportarSintegra");

                    b.Property<bool>("NaoInsideCofins")
                        .HasColumnType("boolean")
                        .HasColumnName("NaoInsideCofins");

                    b.Property<bool>("NaoInsideIcms")
                        .HasColumnType("boolean")
                        .HasColumnName("NaoInsideIcms");

                    b.Property<bool>("NaoInsidePis")
                        .HasColumnType("boolean")
                        .HasColumnName("NaoInsidePis");

                    b.Property<string>("Observacao")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Observacao");

                    b.Property<int?>("PlanoDeContaId")
                        .HasColumnType("integer")
                        .HasColumnName("PlanoDeContaId");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("CsosnId");

                    b.HasIndex("CstId");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("NaturezaOperacao");
                });

            modelBuilder.Entity("Data.Entidades.Nbm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoNbm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CodigoNbm");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double?>("VlrAgregadoEst")
                        .HasColumnType("double precision")
                        .HasColumnName("VlrAgregadoEst");

                    b.Property<double?>("VlrAgregadoInt")
                        .HasColumnType("double precision")
                        .HasColumnName("VlrAgregadoInt");

                    b.Property<double?>("VlrComplementarEst")
                        .HasColumnType("double precision")
                        .HasColumnName("VlrComplementarEst");

                    b.Property<double?>("VlrComplementarInt")
                        .HasColumnType("double precision")
                        .HasColumnName("VlrComplementarInt");

                    b.HasKey("Id");

                    b.ToTable("Nbm");
                });

            modelBuilder.Entity("Data.Entidades.Ncm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AliquotaCofins")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaCofins");

                    b.Property<double?>("AliquotaIcmsProduto")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIcmsProduto");

                    b.Property<double?>("AliquotaImportacao")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaImportacao");

                    b.Property<double?>("AliquotaNacional")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaNacional");

                    b.Property<double?>("AliquotaPis")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaPis");

                    b.Property<string>("CodigoNcm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CodigoNcm");

                    b.Property<int?>("CodigoNcmEx")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoNcmEx");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double?>("PercentualMva")
                        .HasColumnType("double precision")
                        .HasColumnName("PercentualMva");

                    b.Property<bool>("ProdutoServico")
                        .HasColumnType("boolean")
                        .HasColumnName("ProdutoServico");

                    b.Property<int?>("TributoCstCofinsEntradaId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCstCofinsEntradaId");

                    b.Property<int?>("TributoCstCofinsSaidaId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCstCofinsSaidaId");

                    b.Property<int?>("TributoCstPisEntradaId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCstPisEntradaId");

                    b.Property<int?>("TributoCstPisSaidaId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCstPisSaidaId");

                    b.HasKey("Id");

                    b.HasIndex("TributoCstCofinsEntradaId");

                    b.HasIndex("TributoCstCofinsSaidaId");

                    b.HasIndex("TributoCstPisEntradaId");

                    b.HasIndex("TributoCstPisSaidaId");

                    b.ToTable("Ncm");
                });

            modelBuilder.Entity("Data.Entidades.NcmEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AliquotaIcms")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIcms");

                    b.Property<double?>("AliquotaIcmsInterna")
                        .HasColumnType("double precision")
                        .HasColumnName("AliquotaIcmsInterna");

                    b.Property<int?>("EstadoDestinoId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("EstadoDestinoId");

                    b.Property<int?>("EstadoOrigemId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("EstadoOrigemId");

                    b.Property<int?>("NcmId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("NcmId");

                    b.Property<double?>("PercentualFcp")
                        .HasColumnType("double precision")
                        .HasColumnName("PercentualFcp");

                    b.Property<double?>("PercentualMva")
                        .HasColumnType("double precision")
                        .HasColumnName("PercentualMva");

                    b.Property<int?>("TributoCsosnId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCsosnId");

                    b.Property<int?>("TributoCstId")
                        .HasColumnType("integer")
                        .HasColumnName("TributoCstId");

                    b.HasKey("Id");

                    b.HasIndex("NcmId");

                    b.ToTable("NcmEstado");
                });

            modelBuilder.Entity("Data.Entidades.OperadorCaixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeAbreviado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeAbreviado");

                    b.HasKey("Id");

                    b.ToTable("OperadorCaixa");
                });

            modelBuilder.Entity("Data.Entidades.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoIbge")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoIbge");

                    b.Property<int?>("CodigoTelefonico")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoTelefonico");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("Data.Entidades.Pbm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("Observacao")
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.HasKey("Id");

                    b.ToTable("Pbm");
                });

            modelBuilder.Entity("Data.Entidades.PlanoDeContas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Descricao");

                    b.Property<int>("NivelConta")
                        .HasColumnType("integer")
                        .HasColumnName("NivelConta");

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NumeroConta");

                    b.Property<string>("NumeroContaPai")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NumeroContaPai");

                    b.Property<double?>("Sequencia")
                        .HasColumnType("double precision")
                        .HasColumnName("Sequencia");

                    b.HasKey("Id");

                    b.ToTable("PlanoDeContas");
                });

            modelBuilder.Entity("Data.Entidades.Portador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<bool>("PortadorInativo")
                        .HasColumnType("boolean")
                        .HasColumnName("PortadorInativo");

                    b.HasKey("Id");

                    b.ToTable("Portador");
                });

            modelBuilder.Entity("Data.Entidades.PosAdquirente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChaveRequisicao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ChaveRequisicao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("PosAdquirente");
                });

            modelBuilder.Entity("Data.Entidades.Posologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("Periodo")
                        .HasColumnType("integer")
                        .HasColumnName("Periodo");

                    b.Property<int?>("QuantidadeCapsulasOuDoses")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeCapsulasOuDoses");

                    b.HasKey("Id");

                    b.ToTable("Posologia");
                });

            modelBuilder.Entity("Data.Entidades.Prescritor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aniversario")
                        .HasColumnType("text")
                        .HasColumnName("Aniversario");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<bool>("Cedh")
                        .HasColumnType("boolean")
                        .HasColumnName("Cedh");

                    b.Property<string>("Celular")
                        .HasColumnType("text")
                        .HasColumnName("Celular");

                    b.Property<string>("Cep")
                        .HasColumnType("text")
                        .HasColumnName("Cep");

                    b.Property<string>("CepRes")
                        .HasColumnType("text")
                        .HasColumnName("CepRes");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<string>("Complemento")
                        .HasColumnType("text")
                        .HasColumnName("Complemento");

                    b.Property<string>("CpfCnpj")
                        .HasColumnType("text")
                        .HasColumnName("CpfCnpj");

                    b.Property<string>("CrmEstado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CrmEstado");

                    b.Property<string>("CrmNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CrmNumero");

                    b.Property<string>("CrmTipo")
                        .HasColumnType("text")
                        .HasColumnName("CrmTipo");

                    b.Property<string>("DDD")
                        .HasColumnType("text")
                        .HasColumnName("DDD");

                    b.Property<string>("DDDCelular")
                        .HasColumnType("text")
                        .HasColumnName("DDDCelular");

                    b.Property<string>("DDDRes")
                        .HasColumnType("text")
                        .HasColumnName("DDDRes");

                    b.Property<DateTime>("Data_Nascimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Data_Nascimento");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("Endereco");

                    b.Property<string>("EnderecoRes")
                        .HasColumnType("text")
                        .HasColumnName("EnderecoRes");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<int>("Genero")
                        .HasColumnType("integer")
                        .HasColumnName("Genero");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeRotulo")
                        .HasColumnType("text")
                        .HasColumnName("NomeRotulo");

                    b.Property<string>("Numero")
                        .HasColumnType("text")
                        .HasColumnName("Numero");

                    b.Property<string>("NumeroRes")
                        .HasColumnType("text")
                        .HasColumnName("NumeroRes");

                    b.Property<string>("ObservacaoVenda")
                        .HasColumnType("text")
                        .HasColumnName("ObservacaoVenda");

                    b.Property<string>("Proximidade")
                        .HasColumnType("text")
                        .HasColumnName("Proximidade");

                    b.Property<string>("RegistroMapa")
                        .HasColumnType("text")
                        .HasColumnName("RegistroMapa");

                    b.Property<string>("Secretaria")
                        .HasColumnType("text")
                        .HasColumnName("Secretaria");

                    b.Property<string>("Telefone")
                        .HasColumnType("text")
                        .HasColumnName("Telefone");

                    b.Property<string>("TelefoneRes")
                        .HasColumnType("text")
                        .HasColumnName("TelefoneRes");

                    b.Property<int>("TipoCr")
                        .HasColumnType("integer")
                        .HasColumnName("TipoCr");

                    b.Property<int?>("VisitadorId")
                        .HasColumnType("integer")
                        .HasColumnName("VisitadorId");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("VisitadorId");

                    b.ToTable("Prescritor");
                });

            modelBuilder.Entity("Data.Entidades.PrincipioAtivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("PrincipioAtivo");
                });

            modelBuilder.Entity("Data.Entidades.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Data.Entidades.ReacoesAdversas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("ClienteId");

                    b.Property<DateTime?>("Data")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Data");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Dose");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Medicamento");

                    b.Property<string>("Reacao")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Reacao");

                    b.HasKey("Id");

                    b.ToTable("ReacoesAdversas");
                });

            modelBuilder.Entity("Data.Entidades.Regiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime?>("DataAtualizacaoRec")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataAtualizacaoRec");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Descricao");

                    b.Property<DateTime>("HoraFinalDomingo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalDomingo");

                    b.Property<DateTime>("HoraFinalQuarta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalQuarta");

                    b.Property<DateTime>("HoraFinalQuinta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalQuinta");

                    b.Property<DateTime>("HoraFinalSabado")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalSabado");

                    b.Property<DateTime?>("HoraFinalSegunda")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalSegunda");

                    b.Property<DateTime>("HoraFinalSexta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalSexta");

                    b.Property<DateTime>("HoraFinalTerca")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraFinalTerca");

                    b.Property<DateTime?>("HoraIncialDomingo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialDomingo");

                    b.Property<DateTime?>("HoraInicialQuarta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialQuarta");

                    b.Property<DateTime?>("HoraInicialQuinta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialQuinta");

                    b.Property<DateTime?>("HoraInicialSabado")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialSabado");

                    b.Property<DateTime>("HoraInicialSegunda")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialSegunda");

                    b.Property<DateTime?>("HoraInicialSexta")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialSexta");

                    b.Property<DateTime?>("HoraInicialTerca")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraInicialTerca");

                    b.Property<bool>("IeDomingo")
                        .HasColumnType("boolean")
                        .HasColumnName("IeDomingo");

                    b.Property<bool>("IeQuarta")
                        .HasColumnType("boolean")
                        .HasColumnName("IeQuarta");

                    b.Property<bool>("IeQuinta")
                        .HasColumnType("boolean")
                        .HasColumnName("IeQuinta");

                    b.Property<bool>("IeSabado")
                        .HasColumnType("boolean")
                        .HasColumnName("IeSabado");

                    b.Property<bool>("IeSegunda")
                        .HasColumnType("boolean")
                        .HasColumnName("IeSegunda");

                    b.Property<bool>("IeSexta")
                        .HasColumnType("boolean")
                        .HasColumnName("IeSexta");

                    b.Property<bool>("IeTerca")
                        .HasColumnType("boolean")
                        .HasColumnName("IeTerca");

                    b.Property<string>("NomeUsuario")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeUsuario");

                    b.Property<string>("NomeUsuarioRec")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeUsuarioRec");

                    b.Property<double?>("Taxa")
                        .HasColumnType("double precision")
                        .HasColumnName("Taxa");

                    b.HasKey("Id");

                    b.ToTable("Regiao");
                });

            modelBuilder.Entity("Data.Entidades.Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("IntervaloProducaoEntrega")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("IntervaloProducaoEntrega");

                    b.Property<string>("Nome")
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Setor");
                });

            modelBuilder.Entity("Data.Entidades.SetorDiasHoras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiasHorasId")
                        .HasColumnType("integer")
                        .HasColumnName("DiasHorasId");

                    b.Property<int>("SetorId")
                        .HasColumnType("integer")
                        .HasColumnName("SetorId");

                    b.HasKey("Id");

                    b.ToTable("SetorDiasHoras");
                });

            modelBuilder.Entity("Data.Entidades.SetorForma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaId");

                    b.Property<int>("SetorId")
                        .HasColumnType("integer")
                        .HasColumnName("SetorId");

                    b.HasKey("Id");

                    b.ToTable("SetorForma");
                });

            modelBuilder.Entity("Data.Entidades.TabelaFloral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuantidadeFinal")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeFinal");

                    b.Property<int>("QuantidadeInicial")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeInicial");

                    b.Property<double>("ValorVenda")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorVenda");

                    b.Property<int>("Volume")
                        .HasColumnType("integer")
                        .HasColumnName("Volume");

                    b.HasKey("Id");

                    b.ToTable("TabelaFloral");
                });

            modelBuilder.Entity("Data.Entidades.TabelaHomeopatia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DinamizacaoFinal")
                        .HasColumnType("integer")
                        .HasColumnName("DinamizacaoFinal");

                    b.Property<int>("DinamizacaoInicial")
                        .HasColumnType("integer")
                        .HasColumnName("DinamizacaoInicial");

                    b.Property<int?>("FormaFarmaceuticaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("Metodo");

                    b.Property<double?>("ValorAdicional")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorAdicional");

                    b.Property<double?>("ValorVenda")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorVenda");

                    b.Property<int>("Volume")
                        .HasColumnType("integer")
                        .HasColumnName("Volume");

                    b.HasKey("Id");

                    b.ToTable("TabelaHomeopatia");
                });

            modelBuilder.Entity("Data.Entidades.TabelaHomeopatiaQuantidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DinamizacaoFinal")
                        .HasColumnType("integer")
                        .HasColumnName("DinamizacaoFinal");

                    b.Property<int>("DinamizacaoInicial")
                        .HasColumnType("integer")
                        .HasColumnName("DinamizacaoInicial");

                    b.Property<int?>("FormaFarmaceuticaId")
                        .HasColumnType("integer")
                        .HasColumnName("FormaFarmaceuticaId");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("Metodo");

                    b.Property<int>("QuantidadeFinal")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeFinal");

                    b.Property<int>("QuantidadeInicial")
                        .HasColumnType("integer")
                        .HasColumnName("QuantidadeInicial");

                    b.Property<double>("ValorAdicional")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorAdicional");

                    b.Property<double>("ValorVenda")
                        .HasColumnType("double precision")
                        .HasColumnName("ValorVenda");

                    b.HasKey("Id");

                    b.ToTable("TabelaHomeopatiaQuantidade");
                });

            modelBuilder.Entity("Data.Entidades.TipoCapsula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CapsulaPadraoId")
                        .HasColumnType("integer")
                        .HasColumnName("CapsulaPadraoId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("GrupoCapsulasId")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoCapsulasId");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Inativo");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Numero");

                    b.Property<double?>("Peso")
                        .HasColumnType("double precision")
                        .HasColumnName("Peso");

                    b.Property<double?>("VolumeInterno")
                        .HasColumnType("double precision")
                        .HasColumnName("VolumeInterno");

                    b.Property<double?>("VolumeTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("VolumeTotal");

                    b.HasKey("Id");

                    b.HasIndex("CapsulaPadraoId");

                    b.HasIndex("GrupoCapsulasId");

                    b.ToTable("TipoCapsula");
                });

            modelBuilder.Entity("Data.Entidades.TipoContato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TipoContato");
                });

            modelBuilder.Entity("Data.Entidades.TipoJustificativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TipoJustificativa");
                });

            modelBuilder.Entity("Data.Entidades.Transacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("ClienteId");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo");

                    b.Property<bool>("Conciliar")
                        .HasColumnType("boolean")
                        .HasColumnName("Conciliar");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Descricao");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId");

                    b.Property<int?>("PlanoDeContaId")
                        .HasColumnType("integer")
                        .HasColumnName("ContaId");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("Transacao");
                });

            modelBuilder.Entity("Data.Entidades.Transportador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<string>("Cep")
                        .HasColumnType("text")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<string>("CodigoAntt")
                        .HasColumnType("text")
                        .HasColumnName("CodigoAntt");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CpfCnpj");

                    b.Property<string>("DDD")
                        .HasColumnType("text")
                        .HasColumnName("DDD");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("Endereco");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<int?>("EstadoPlacaId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoPlacaId");

                    b.Property<string>("Ie")
                        .HasColumnType("text")
                        .HasColumnName("Ie");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Numero")
                        .HasColumnType("text")
                        .HasColumnName("Numero");

                    b.Property<string>("Placa")
                        .HasColumnType("text")
                        .HasColumnName("Placa");

                    b.Property<string>("Telefone")
                        .HasColumnType("text")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("EstadoPlacaId");

                    b.ToTable("Transportador");
                });

            modelBuilder.Entity("Data.Entidades.Tributo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Codigo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Descricao");

                    b.Property<int>("TipoTributo")
                        .HasColumnType("integer")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Tributo");
                });

            modelBuilder.Entity("Data.Entidades.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<string>("HoraFinal")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("HoraFinal");

                    b.Property<string>("HoraInicial")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("HoraInicial");

                    b.HasKey("Id");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("Data.Entidades.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double?>("Fator")
                        .HasColumnType("double precision")
                        .HasColumnName("Fator");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("Sigla");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("Data.Entidades.UnidadeConversao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Descricao");

                    b.Property<double?>("Fator")
                        .HasColumnType("double precision")
                        .HasColumnName("Fator");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("Sigla");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("UnidadeId");

                    b.HasKey("Id");

                    b.HasIndex("UnidadeId");

                    b.ToTable("UnidadeConversao");
                });

            modelBuilder.Entity("Data.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DataTrocaSenha")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataTrocaSenha");

                    b.Property<DateTime?>("DataUltimoAcesso")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataUltimoAcesso");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("Email");

                    b.Property<int?>("FilialProducaoId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialProducaoId");

                    b.Property<int?>("FilialUsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialUsuarioId");

                    b.Property<int?>("GrupoUsuarioId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("GrupoUsuarioId");

                    b.Property<DateTime?>("HoraUltimoAcesso")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("HoraUltimoAcesso");

                    b.Property<bool>("LidoNovidade")
                        .HasColumnType("boolean")
                        .HasColumnName("LidoNovidade");

                    b.Property<bool>("Logon")
                        .HasColumnType("boolean")
                        .HasColumnName("Logon");

                    b.Property<int?>("Nivel")
                        .HasColumnType("integer")
                        .HasColumnName("Nivel");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeAbreviado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeAbreviado");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.HasIndex("GrupoUsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Data.Entidades.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Celular");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<double?>("Comissao")
                        .HasColumnType("double precision")
                        .HasColumnName("Comissao");

                    b.Property<string>("Complemento")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Complemento");

                    b.Property<string>("CpfOuCnpj")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("CpfOuCnpj");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Ddd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("Ddd");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Endereco");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<string>("Genero")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("Genero");

                    b.Property<double?>("LimiteDesconto")
                        .HasColumnType("double precision")
                        .HasColumnName("LimiteDesconto");

                    b.Property<string>("LoginVendedorFarmaciaPopular")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("LoginVendedorFarmaciaPopular");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeAbreviado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("NomeAbreviado");

                    b.Property<string>("NumeroEndereco")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("NumeroEndereco");

                    b.Property<string>("SenhaVendedorFarmaciaPopular")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("SenhaVendedorFarmaciaPopular");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefone");

                    b.Property<int?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vendedor");
                });

            modelBuilder.Entity("Data.Entidades.VendedorComissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodigoGrupo")
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId");

                    b.Property<double?>("Comissao")
                        .HasColumnType("double precision")
                        .HasColumnName("Comissao");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("integer");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("integer")
                        .HasColumnName("VendedorId");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedorComissao", t =>
                        {
                            t.Property("GrupoId")
                                .HasColumnName("GrupoId1");
                        });
                });

            modelBuilder.Entity("Data.Entidades.Visitador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BairroId")
                        .HasColumnType("integer")
                        .HasColumnName("BairroId");

                    b.Property<string>("Celular")
                        .HasColumnType("text")
                        .HasColumnName("Celular");

                    b.Property<string>("Cep")
                        .HasColumnType("text")
                        .HasColumnName("Cep");

                    b.Property<int?>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("CidadeId");

                    b.Property<double?>("Comissao")
                        .HasColumnType("double precision")
                        .HasColumnName("Comissao");

                    b.Property<string>("Complemento")
                        .HasColumnType("text")
                        .HasColumnName("Complemento");

                    b.Property<string>("DDD")
                        .HasColumnType("text")
                        .HasColumnName("DDD");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("Endereco");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("EstadoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("Numero")
                        .HasColumnType("text")
                        .HasColumnName("Numero");

                    b.Property<string>("Telefone")
                        .HasColumnType("text")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("BairroId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Visitador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entidades.AdministradoraCartao", b =>
                {
                    b.HasOne("Data.Entidades.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("Data.Entidades.PlanoDeContas", "PlanoDeConta")
                        .WithMany()
                        .HasForeignKey("PlanoDeContaId");

                    b.Navigation("Fornecedor");

                    b.Navigation("PlanoDeConta");
                });

            modelBuilder.Entity("Data.Entidades.Categoria", b =>
                {
                    b.HasOne("Data.Entidades.Categoria", "CategoriaPai")
                        .WithMany()
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("Data.Entidades.Cidade", b =>
                {
                    b.HasOne("Data.Entidades.Tributo", "CodigoCfps")
                        .WithMany()
                        .HasForeignKey("CodigoCfpsId");

                    b.Navigation("CodigoCfps");
                });

            modelBuilder.Entity("Data.Entidades.Contabilista", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Data.Entidades.Convenio", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Data.Entidades.Visitador", "Visitador")
                        .WithMany()
                        .HasForeignKey("VisitadorId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("Visitador");
                });

            modelBuilder.Entity("Data.Entidades.ConvenioGrupo", b =>
                {
                    b.HasOne("Data.Entidades.ConvenioGrupo", null)
                        .WithMany("ConvenioGrupos")
                        .HasForeignKey("ConvenioGrupoId");
                });

            modelBuilder.Entity("Data.Entidades.Ensaio", b =>
                {
                    b.HasOne("Data.Entidades.Farmacopeia", "Farmacopeia")
                        .WithMany()
                        .HasForeignKey("FarmacopeiaId");

                    b.Navigation("Farmacopeia");
                });

            modelBuilder.Entity("Data.Entidades.EntregadorRegiao", b =>
                {
                    b.HasOne("Data.Entidades.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entidades.Regiao", "Regiao")
                        .WithMany()
                        .HasForeignKey("RegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entregador");

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("Data.Entidades.EspecialidadePrescritor", b =>
                {
                    b.HasOne("Data.Entidades.Prescritor", null)
                        .WithMany("EspecialidadePrescritores")
                        .HasForeignKey("PrescritorId");
                });

            modelBuilder.Entity("Data.Entidades.Estado", b =>
                {
                    b.HasOne("Data.Entidades.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Data.Entidades.FidelidadePremios", b =>
                {
                    b.HasOne("Data.Entidades.Fidelidade", "Fidelidade")
                        .WithMany()
                        .HasForeignKey("FidelidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fidelidade");

                    b.Navigation("Grupo");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceutica", b =>
                {
                    b.HasOne("Data.Entidades.Produto", "GrupoVeiculo")
                        .WithMany()
                        .HasForeignKey("GrupoVeiculoId");

                    b.HasOne("Data.Entidades.FuncionarioLaboratorio", "Manipulador")
                        .WithMany()
                        .HasForeignKey("ManipuladorId");

                    b.HasOne("Data.Entidades.Ncm", "Ncm")
                        .WithMany()
                        .HasForeignKey("NcmId");

                    b.HasOne("Data.Entidades.Produto", "ProdutoVeiculo")
                        .WithMany()
                        .HasForeignKey("ProdutoVeiculoId");

                    b.Navigation("GrupoVeiculo");

                    b.Navigation("Manipulador");

                    b.Navigation("Ncm");

                    b.Navigation("ProdutoVeiculo");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceuticaEnsaio", b =>
                {
                    b.HasOne("Data.Entidades.FormaFarmaceutica", null)
                        .WithMany("FormaFarmaceuticaEnsaios")
                        .HasForeignKey("FormaFarmaceuticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceuticaMargem", b =>
                {
                    b.HasOne("Data.Entidades.FormaFarmaceutica", null)
                        .WithMany("FormaFarmaceuticaMargens")
                        .HasForeignKey("FormaFarmaceuticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entidades.FormaPagamento", b =>
                {
                    b.HasOne("Data.Entidades.PlanoDeContas", "PlanoDeConta")
                        .WithMany()
                        .HasForeignKey("PlanoDeContaId");

                    b.Navigation("PlanoDeConta");
                });

            modelBuilder.Entity("Data.Entidades.FormulaPadrao", b =>
                {
                    b.HasOne("Data.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");

                    b.HasOne("Data.Entidades.Posologia", "Posologia")
                        .WithMany()
                        .HasForeignKey("PosologiaId");

                    b.HasOne("Data.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId");

                    b.HasOne("Data.Entidades.Unidade", "UnidadeDose")
                        .WithMany()
                        .HasForeignKey("UnidadeDoseId");

                    b.HasOne("Data.Entidades.Unidade", "UnidadeDosePadrao")
                        .WithMany()
                        .HasForeignKey("UnidadeDosePadraoId");

                    b.HasOne("Data.Entidades.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId");

                    b.Navigation("Grupo");

                    b.Navigation("Posologia");

                    b.Navigation("Produto");

                    b.Navigation("Unidade");

                    b.Navigation("UnidadeDose");

                    b.Navigation("UnidadeDosePadrao");
                });

            modelBuilder.Entity("Data.Entidades.Fornecedor", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entidades.PlanoDeContas", "PlanoDeConta")
                        .WithMany()
                        .HasForeignKey("PlanoDeContaId");

                    b.Navigation("Bairro");

                    b.Navigation("Banco");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("PlanoDeConta");
                });

            modelBuilder.Entity("Data.Entidades.GrupoEnsaio", b =>
                {
                    b.HasOne("Data.Entidades.Grupo", null)
                        .WithMany("GrupoEnsaios")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entidades.LocalEntrega", b =>
                {
                    b.HasOne("Data.Entidades.NaturezaOperacao", "Cfop")
                        .WithMany()
                        .HasForeignKey("CfopId");

                    b.HasOne("Data.Entidades.Tributo", "CodigoBeneficioFiscal")
                        .WithMany()
                        .HasForeignKey("CodigoBeneficioFiscalId");

                    b.HasOne("Data.Entidades.Tributo", "Csosn")
                        .WithMany()
                        .HasForeignKey("CsosnId");

                    b.HasOne("Data.Entidades.Tributo", "Cst")
                        .WithMany()
                        .HasForeignKey("CstId");

                    b.HasOne("Data.Entidades.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId");

                    b.HasOne("Data.Entidades.Ncm", "Ncm")
                        .WithMany()
                        .HasForeignKey("NcmId");

                    b.Navigation("Cfop");

                    b.Navigation("CodigoBeneficioFiscal");

                    b.Navigation("Csosn");

                    b.Navigation("Cst");

                    b.Navigation("Entregador");

                    b.Navigation("Ncm");
                });

            modelBuilder.Entity("Data.Entidades.MaquinaPos", b =>
                {
                    b.HasOne("Data.Entidades.PosAdquirente", "AdquirentePos")
                        .WithMany()
                        .HasForeignKey("AdquirentePosId");

                    b.Navigation("AdquirentePos");
                });

            modelBuilder.Entity("Data.Entidades.NaturezaOperacao", b =>
                {
                    b.HasOne("Data.Entidades.Tributo", "Csosn")
                        .WithMany()
                        .HasForeignKey("CsosnId");

                    b.HasOne("Data.Entidades.Tributo", "Cst")
                        .WithMany()
                        .HasForeignKey("CstId");

                    b.HasOne("Data.Entidades.PlanoDeContas", "PlanoDeConta")
                        .WithMany()
                        .HasForeignKey("PlanoDeContaId");

                    b.Navigation("Csosn");

                    b.Navigation("Cst");

                    b.Navigation("PlanoDeConta");
                });

            modelBuilder.Entity("Data.Entidades.Ncm", b =>
                {
                    b.HasOne("Data.Entidades.Tributo", "TributoCstCofinsEntrada")
                        .WithMany()
                        .HasForeignKey("TributoCstCofinsEntradaId");

                    b.HasOne("Data.Entidades.Tributo", "TributoCstCofinsSaida")
                        .WithMany()
                        .HasForeignKey("TributoCstCofinsSaidaId");

                    b.HasOne("Data.Entidades.Tributo", "TributoCstPisEntrada")
                        .WithMany()
                        .HasForeignKey("TributoCstPisEntradaId");

                    b.HasOne("Data.Entidades.Tributo", "TributoCstPisSaida")
                        .WithMany()
                        .HasForeignKey("TributoCstPisSaidaId");

                    b.Navigation("TributoCstCofinsEntrada");

                    b.Navigation("TributoCstCofinsSaida");

                    b.Navigation("TributoCstPisEntrada");

                    b.Navigation("TributoCstPisSaida");
                });

            modelBuilder.Entity("Data.Entidades.NcmEstado", b =>
                {
                    b.HasOne("Data.Entidades.Ncm", null)
                        .WithMany("NcmEstados")
                        .HasForeignKey("NcmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entidades.Prescritor", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Data.Entidades.Visitador", "Visitador")
                        .WithMany()
                        .HasForeignKey("VisitadorId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("Visitador");
                });

            modelBuilder.Entity("Data.Entidades.TipoCapsula", b =>
                {
                    b.HasOne("Data.Entidades.Produto", "CapsulaPadrao")
                        .WithMany()
                        .HasForeignKey("CapsulaPadraoId");

                    b.HasOne("Data.Entidades.Produto", "GrupoCapsulas")
                        .WithMany()
                        .HasForeignKey("GrupoCapsulasId");

                    b.Navigation("CapsulaPadrao");

                    b.Navigation("GrupoCapsulas");
                });

            modelBuilder.Entity("Data.Entidades.Transacao", b =>
                {
                    b.HasOne("Data.Entidades.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("Data.Entidades.PlanoDeContas", "PlanoDeConta")
                        .WithMany()
                        .HasForeignKey("PlanoDeContaId");

                    b.Navigation("Fornecedor");

                    b.Navigation("PlanoDeConta");
                });

            modelBuilder.Entity("Data.Entidades.Transportador", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Data.Entidades.Estado", "EstadoPlaca")
                        .WithMany()
                        .HasForeignKey("EstadoPlacaId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("EstadoPlaca");
                });

            modelBuilder.Entity("Data.Entidades.UnidadeConversao", b =>
                {
                    b.HasOne("Data.Entidades.Unidade", null)
                        .WithMany("UnidadesConversao")
                        .HasForeignKey("UnidadeId");
                });

            modelBuilder.Entity("Data.Entidades.Usuario", b =>
                {
                    b.HasOne("Data.Entidades.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("GrupoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoUsuario");
                });

            modelBuilder.Entity("Data.Entidades.Vendedor", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Data.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Data.Entidades.VendedorComissao", b =>
                {
                    b.HasOne("Data.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");

                    b.HasOne("Data.Entidades.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId");

                    b.Navigation("Grupo");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Data.Entidades.Visitador", b =>
                {
                    b.HasOne("Data.Entidades.Bairro", "Bairro")
                        .WithMany()
                        .HasForeignKey("BairroId");

                    b.HasOne("Data.Entidades.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("Data.Entidades.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entidades.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entidades.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entidades.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entidades.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entidades.ConvenioGrupo", b =>
                {
                    b.Navigation("ConvenioGrupos");
                });

            modelBuilder.Entity("Data.Entidades.FormaFarmaceutica", b =>
                {
                    b.Navigation("FormaFarmaceuticaEnsaios");

                    b.Navigation("FormaFarmaceuticaMargens");
                });

            modelBuilder.Entity("Data.Entidades.Grupo", b =>
                {
                    b.Navigation("GrupoEnsaios");
                });

            modelBuilder.Entity("Data.Entidades.Ncm", b =>
                {
                    b.Navigation("NcmEstados");
                });

            modelBuilder.Entity("Data.Entidades.Prescritor", b =>
                {
                    b.Navigation("EspecialidadePrescritores");
                });

            modelBuilder.Entity("Data.Entidades.Unidade", b =>
                {
                    b.Navigation("UnidadesConversao");
                });
#pragma warning restore 612, 618
        }
    }
}
